#!/usr/bin/env python3

import sqlite3
import sys
from datetime import datetime

def create_complete_fedex_rate_cards():
    """
    Create complete FedEx rate cards for all three service types:
    1. INT'L PRIORITY EXPRESS SHIPMENTS
    2. INT'L PRIORITY SHIPMENTS  
    3. INT'L ECONOMY EXPRESS SHIPMENTS
    """
    
    try:
        # Connect to database
        conn = sqlite3.connect('fedex_audit.db')
        cursor = conn.cursor()
        
        # Clear existing rate cards
        print("Clearing existing FedEx rate cards...")
        cursor.execute("DELETE FROM fedex_rate_cards")
        
        # Reset auto-increment
        cursor.execute("DELETE FROM sqlite_sequence WHERE name='fedex_rate_cards'")
        
        print("Creating complete FedEx rate cards...")
        
        # Zone codes mapping
        zones = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P']
        
        # 1. INT'L PRIORITY EXPRESS SHIPMENTS
        service_type = "PRIORITY_EXPRESS"
        rate_card_name = "Intl Priority Express"
        
        # OL rates
        ol_rates = [9.59, 10.75, 12.54, 13.74, 16.64, 19.22, 21.53, 23.92, 31.12, 33.49, 35.89, 39.49, 53.85, 68.21, 19.22, 35.89]
        
        for i, zone in enumerate(zones):
            cursor.execute("""
                INSERT INTO fedex_rate_cards 
                (rate_card_name, service_type, origin_region, destination_region, zone_code, 
                 weight_from, weight_to, rate_usd, rate_type, effective_date) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (rate_card_name, service_type, "US", "INTL", zone, 0, 0, ol_rates[i], "OL", "2025-08-14"))
        
        # PAK rates for Priority Express
        pak_weights = [0.5, 1.0, 1.5, 2.0, 2.5]
        pak_rates = [
            [10.87, 13.14, 14.94, 16.13, 19.22, 21.77, 23.92, 26.32, 32.29, 38.29, 39.49, 43.09, 68.21, 73.01, 21.77, 39.49],
            [14.72, 16.73, 18.54, 19.74, 23.05, 25.63, 27.51, 29.91, 35.89, 43.09, 44.27, 47.88, 71.82, 88.57, 25.63, 44.27],
            [18.57, 20.32, 22.13, 23.32, 26.91, 29.47, 31.12, 33.49, 39.49, 47.88, 49.05, 52.65, 75.41, 104.13, 29.47, 49.05],
            [22.41, 23.92, 25.71, 26.92, 30.75, 33.33, 34.69, 37.09, 43.09, 52.65, 53.85, 57.45, 79.01, 119.71, 33.33, 53.85],
            [26.27, 27.51, 29.30, 30.50, 34.59, 37.15, 38.29, 40.68, 46.67, 57.45, 58.65, 62.24, 82.58, 135.27, 37.15, 58.65]
        ]
        
        for weight_idx, weight in enumerate(pak_weights):
            for zone_idx, zone in enumerate(zones):
                cursor.execute("""
                    INSERT INTO fedex_rate_cards 
                    (rate_card_name, service_type, origin_region, destination_region, zone_code, 
                     weight_from, weight_to, rate_usd, rate_type, effective_date) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (rate_card_name, service_type, "US", "INTL", zone, weight, weight, pak_rates[weight_idx][zone_idx], "PAK", "2025-08-14"))
        
        # IP Package rates for Priority Express (0.5kg to 20.5kg)
        ip_weights = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0, 16.5, 17.0, 17.5, 18.0, 18.5, 19.0, 19.5, 20.0, 20.5]
        
        ip_rates = [
            [16.00, 16.73, 18.54, 19.74, 23.05, 25.63, 27.51, 28.72, 34.69, 40.68, 43.09, 45.48, 75.41, 89.77, 25.63, 43.09],
            [18.28, 18.98, 21.07, 22.28, 28.29, 31.13, 31.38, 35.14, 39.38, 43.70, 48.44, 50.99, 85.00, 106.03, 31.13, 48.44],
            [20.47, 21.24, 23.62, 25.05, 31.94, 35.12, 35.42, 39.69, 44.42, 48.88, 54.05, 56.89, 94.84, 122.16, 35.12, 54.05],
            [22.69, 23.52, 26.15, 27.83, 36.22, 39.85, 40.18, 45.00, 50.40, 55.45, 59.66, 62.80, 104.68, 138.29, 39.85, 59.66],
            [24.88, 25.81, 28.70, 30.59, 40.50, 44.57, 44.92, 50.32, 56.35, 62.00, 65.26, 68.69, 114.52, 154.43, 44.57, 65.26],
            [27.09, 28.09, 31.21, 33.39, 44.79, 49.27, 49.68, 55.63, 62.32, 68.57, 70.87, 74.60, 124.36, 171.05, 49.27, 70.87],
            [29.28, 30.38, 33.75, 36.16, 49.05, 54.00, 54.44, 60.96, 68.30, 75.12, 76.48, 80.52, 134.21, 187.69, 54.00, 76.48],
            [31.48, 32.67, 36.29, 38.94, 53.36, 58.72, 59.18, 66.28, 74.24, 81.67, 82.09, 86.41, 144.04, 204.33, 58.72, 82.09],
            [33.68, 34.95, 38.83, 41.71, 57.64, 63.45, 63.95, 71.61, 80.22, 87.62, 87.69, 92.31, 153.87, 220.98, 63.45, 87.69],
            [35.89, 37.23, 41.38, 44.49, 61.93, 68.15, 68.71, 76.97, 86.21, 93.13, 93.31, 98.22, 163.72, 237.60, 68.15, 93.31],
            [38.09, 39.52, 43.91, 47.27, 67.86, 74.64, 75.26, 84.30, 94.41, 103.86, 105.18, 110.73, 184.56, 247.36, 74.64, 105.18],
            [40.29, 41.81, 46.45, 50.05, 70.91, 77.99, 78.65, 88.10, 98.68, 108.54, 111.13, 116.97, 194.97, 257.13, 77.99, 111.13],
            [42.49, 44.10, 48.99, 52.82, 73.86, 81.25, 81.93, 91.77, 102.77, 113.06, 117.04, 123.20, 205.36, 266.91, 81.25, 117.04],
            [44.69, 46.37, 51.53, 55.60, 77.09, 84.79, 85.50, 95.77, 107.26, 117.98, 122.99, 129.47, 215.79, 276.67, 84.79, 122.99],
            [46.90, 48.66, 54.07, 58.38, 80.15, 88.16, 88.92, 99.59, 111.53, 122.70, 128.91, 135.72, 226.20, 286.45, 88.16, 128.91],
            [49.11, 50.95, 56.60, 61.16, 83.23, 91.54, 92.30, 103.39, 115.81, 127.39, 134.86, 141.98, 236.64, 296.20, 91.54, 134.86],
            [51.31, 53.24, 59.14, 63.94, 86.02, 94.62, 95.41, 106.86, 119.70, 131.67, 140.80, 148.21, 247.05, 305.97, 94.62, 140.80],
            [53.51, 55.51, 61.67, 66.71, 89.10, 98.01, 98.82, 110.70, 123.98, 136.38, 146.72, 154.46, 257.46, 315.73, 98.01, 146.72],
            [55.71, 57.79, 64.22, 69.48, 92.17, 101.37, 102.22, 114.50, 128.23, 141.06, 152.69, 160.72, 267.88, 325.52, 101.37, 152.69],
            [57.91, 60.08, 66.75, 72.27, 95.22, 104.76, 105.64, 118.31, 132.52, 145.76, 158.62, 166.96, 278.29, 335.28, 104.76, 158.62],
            [59.28, 61.88, 68.71, 74.43, 96.89, 106.53, 107.36, 120.40, 134.74, 148.05, 161.33, 171.87, 284.31, 342.91, 106.53, 161.33],
            [60.66, 63.72, 70.68, 76.60, 98.54, 108.29, 109.11, 122.45, 136.95, 150.33, 164.08, 176.76, 290.35, 350.56, 108.29, 164.08],
            [62.04, 65.52, 72.63, 78.78, 100.21, 110.07, 110.86, 124.53, 139.17, 152.62, 166.80, 181.67, 296.38, 358.20, 110.07, 166.80],
            [63.39, 67.33, 74.62, 80.94, 101.89, 111.84, 112.61, 126.61, 141.38, 154.92, 169.53, 186.58, 302.42, 365.84, 111.84, 169.53],
            [64.76, 69.14, 76.58, 83.08, 103.55, 113.61, 114.36, 128.68, 143.61, 157.22, 172.27, 191.48, 308.43, 373.49, 113.61, 172.27],
            [66.15, 70.96, 78.54, 85.27, 105.19, 115.37, 116.10, 130.78, 145.82, 159.51, 174.99, 196.38, 314.47, 381.12, 115.37, 174.99],
            [67.51, 72.77, 80.50, 87.43, 106.85, 117.14, 117.86, 132.85, 148.06, 161.79, 177.74, 201.29, 320.51, 388.77, 117.14, 177.74],
            [68.89, 74.58, 82.46, 89.60, 108.51, 118.92, 119.61, 134.92, 150.27, 164.09, 180.46, 206.19, 326.52, 396.41, 118.92, 180.46],
            [70.26, 76.40, 84.42, 91.77, 110.17, 120.68, 121.35, 137.01, 152.49, 166.37, 183.19, 211.10, 332.57, 404.06, 120.68, 183.19],
            [71.63, 78.19, 86.38, 93.94, 111.84, 122.45, 123.10, 139.09, 154.71, 168.66, 185.93, 216.01, 338.59, 411.70, 122.45, 185.93],
            [73.01, 80.02, 88.34, 96.11, 113.49, 124.23, 124.85, 141.17, 156.93, 170.96, 188.65, 220.90, 344.64, 419.34, 124.23, 188.65],
            [74.39, 81.83, 90.31, 98.28, 115.16, 126.01, 126.59, 143.25, 159.14, 173.25, 191.39, 225.83, 350.66, 426.99, 126.01, 191.39],
            [75.74, 83.66, 92.27, 100.45, 116.82, 127.77, 128.36, 145.33, 161.37, 175.56, 194.11, 230.72, 356.70, 434.62, 127.77, 194.11],
            [77.12, 85.45, 94.23, 102.62, 118.48, 129.53, 130.09, 147.40, 163.61, 177.83, 196.84, 235.62, 362.73, 442.27, 129.53, 196.84],
            [78.49, 87.27, 96.20, 104.79, 120.15, 131.32, 131.83, 149.49, 165.83, 180.14, 199.58, 240.52, 368.74, 449.91, 131.32, 199.58],
            [79.87, 89.09, 98.16, 106.96, 121.81, 133.07, 133.59, 151.57, 168.04, 182.41, 202.31, 245.44, 374.78, 457.55, 133.07, 202.31],
            [81.23, 90.90, 100.11, 109.11, 123.45, 134.85, 135.33, 153.64, 170.26, 184.69, 205.04, 250.34, 380.82, 465.20, 134.85, 205.04],
            [82.60, 92.71, 102.10, 111.27, 125.11, 136.63, 137.09, 155.72, 172.48, 187.00, 207.77, 255.25, 386.87, 472.84, 136.63, 207.77],
            [83.97, 94.52, 104.04, 113.45, 126.78, 138.39, 138.84, 157.81, 174.70, 189.28, 210.51, 260.15, 392.88, 480.49, 138.39, 210.51],
            [85.36, 96.35, 106.00, 115.62, 128.43, 140.16, 140.58, 159.88, 176.92, 191.58, 213.24, 265.05, 398.93, 488.13, 140.16, 213.24],
            [86.73, 98.16, 107.97, 117.78, 130.12, 141.92, 142.32, 161.97, 179.15, 193.88, 215.96, 269.96, 404.95, 495.76, 141.92, 215.96]
        ]
        
        for weight_idx, weight in enumerate(ip_weights):
            for zone_idx, zone in enumerate(zones):
                cursor.execute("""
                    INSERT INTO fedex_rate_cards 
                    (rate_card_name, service_type, origin_region, destination_region, zone_code, 
                     weight_from, weight_to, rate_usd, rate_type, effective_date) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (rate_card_name, service_type, "US", "INTL", zone, weight, weight, ip_rates[weight_idx][zone_idx], "IP", "2025-08-14"))
        
        # Heavyweight rates for Priority Express
        heavyweight_ranges = [
            ("21-44", 21, 44),
            ("45-70", 45, 70),
            ("71-99", 71, 99),
            ("100-299", 100, 299),
            ("300-499", 300, 499),
            ("500-999", 500, 999),
            (">1000", 1000, 9999)
        ]
        
        heavyweight_rates = [
            [4.13, 4.76, 5.23, 5.71, 6.33, 6.89, 6.91, 7.88, 8.71, 9.42, 10.51, 13.14, 19.74, 24.16, 6.89, 10.51],
            [3.82, 4.52, 4.99, 5.23, 5.74, 6.33, 6.33, 7.17, 7.99, 8.66, 9.56, 11.95, 17.93, 22.00, 6.33, 9.56],
            [3.43, 4.04, 4.52, 4.76, 5.22, 5.74, 5.71, 6.43, 7.17, 7.88, 8.61, 10.75, 16.13, 19.85, 5.74, 8.61],
            [3.43, 4.04, 4.52, 4.76, 5.22, 5.74, 5.71, 6.43, 7.17, 7.88, 8.61, 10.75, 16.13, 19.85, 5.74, 8.61],
            [3.18, 3.93, 4.42, 4.66, 4.72, 5.12, 5.13, 5.84, 6.43, 7.05, 7.77, 9.66, 14.51, 17.81, 5.12, 7.77],
            [3.18, 3.93, 4.42, 4.66, 4.72, 5.12, 5.13, 5.84, 6.43, 7.05, 7.77, 9.66, 14.51, 17.81, 5.12, 7.77],
            [2.92, 3.20, 3.57, 3.81, 4.22, 4.67, 4.66, 5.23, 5.84, 6.33, 6.91, 8.71, 13.03, 16.01, 4.67, 6.91]
        ]
        
        for range_idx, (range_name, weight_from, weight_to) in enumerate(heavyweight_ranges):
            for zone_idx, zone in enumerate(zones):
                cursor.execute("""
                    INSERT INTO fedex_rate_cards 
                    (rate_card_name, service_type, origin_region, destination_region, zone_code, 
                     weight_from, weight_to, rate_usd, rate_type, effective_date) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (rate_card_name, service_type, "US", "INTL", zone, weight_from, weight_to, heavyweight_rates[range_idx][zone_idx], "IPKG", "2025-08-14"))
        
        print(f"✅ Created {service_type} rates")
        
        # 2. INT'L PRIORITY SHIPMENTS (same rates as Priority Express)
        service_type = "PRIORITY"
        rate_card_name = "Intl Priority"
        
        # OL rates (same as Priority Express)
        for i, zone in enumerate(zones):
            cursor.execute("""
                INSERT INTO fedex_rate_cards 
                (rate_card_name, service_type, origin_region, destination_region, zone_code, 
                 weight_from, weight_to, rate_usd, rate_type, effective_date) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (rate_card_name, service_type, "US", "INTL", zone, 0, 0, ol_rates[i], "OL", "2025-08-14"))
        
        # PAK rates (same as Priority Express)
        for weight_idx, weight in enumerate(pak_weights):
            for zone_idx, zone in enumerate(zones):
                cursor.execute("""
                    INSERT INTO fedex_rate_cards 
                    (rate_card_name, service_type, origin_region, destination_region, zone_code, 
                     weight_from, weight_to, rate_usd, rate_type, effective_date) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (rate_card_name, service_type, "US", "INTL", zone, weight, weight, pak_rates[weight_idx][zone_idx], "PAK", "2025-08-14"))
        
        # IP Package rates (same as Priority Express)
        for weight_idx, weight in enumerate(ip_weights):
            for zone_idx, zone in enumerate(zones):
                cursor.execute("""
                    INSERT INTO fedex_rate_cards 
                    (rate_card_name, service_type, origin_region, destination_region, zone_code, 
                     weight_from, weight_to, rate_usd, rate_type, effective_date) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (rate_card_name, service_type, "US", "INTL", zone, weight, weight, ip_rates[weight_idx][zone_idx], "IP", "2025-08-14"))
        
        # Heavyweight rates (same as Priority Express)
        for range_idx, (range_name, weight_from, weight_to) in enumerate(heavyweight_ranges):
            for zone_idx, zone in enumerate(zones):
                cursor.execute("""
                    INSERT INTO fedex_rate_cards 
                    (rate_card_name, service_type, origin_region, destination_region, zone_code, 
                     weight_from, weight_to, rate_usd, rate_type, effective_date) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (rate_card_name, service_type, "US", "INTL", zone, weight_from, weight_to, heavyweight_rates[range_idx][zone_idx], "IPKG", "2025-08-14"))
        
        print(f"✅ Created {service_type} rates")
        
        # 3. INT'L ECONOMY EXPRESS SHIPMENTS
        service_type = "ECONOMY_EXPRESS"
        rate_card_name = "Intl Economy Express"
        
        # IE Package rates (0.5kg to 20.5kg)
        ie_rates = [
            [15.19, 15.90, 17.60, 18.75, 21.91, 24.34, 26.13, 27.26, 32.95, 38.66, 40.91, 43.18, 71.63, 85.28, 12.81, 21.53],
            [17.36, 18.00, 20.01, 21.16, 26.86, 29.56, 29.80, 33.40, 37.40, 41.51, 46.02, 48.44, 80.76, 100.72, 15.56, 24.20],
            [19.46, 20.19, 22.42, 23.78, 30.33, 33.37, 33.65, 37.68, 42.22, 46.44, 51.34, 54.05, 90.10, 116.05, 17.54, 27.01],
            [21.54, 22.35, 24.84, 26.42, 34.40, 37.85, 38.16, 42.73, 47.89, 52.66, 56.67, 59.66, 99.45, 131.37, 19.92, 29.82],
            [23.64, 24.51, 27.24, 29.06, 38.48, 42.34, 42.68, 47.79, 53.55, 58.90, 62.00, 65.26, 108.79, 146.70, 22.28, 32.61],
            [25.72, 26.70, 29.67, 31.71, 42.55, 46.81, 47.19, 52.85, 59.20, 65.14, 67.32, 70.87, 118.13, 162.50, 24.63, 35.42],
            [27.82, 28.85, 32.07, 34.34, 46.62, 51.30, 51.71, 57.92, 64.87, 71.35, 72.67, 76.48, 127.50, 178.31, 26.99, 38.24],
            [29.92, 31.03, 34.49, 36.98, 50.67, 55.79, 56.22, 62.98, 70.53, 77.59, 77.98, 82.09, 136.85, 194.11, 29.34, 41.04],
            [32.01, 33.20, 36.89, 39.63, 54.75, 60.28, 60.74, 68.02, 76.20, 83.23, 83.30, 87.69, 146.19, 209.91, 31.71, 43.83],
            [34.10, 35.37, 39.30, 42.26, 58.85, 64.74, 65.28, 73.11, 81.88, 88.48, 88.64, 93.31, 155.52, 225.72, 34.07, 46.64],
            [36.19, 37.54, 41.72, 44.90, 64.45, 70.90, 71.50, 80.08, 89.69, 98.66, 99.92, 105.18, 175.33, 235.00, 37.31, 52.58],
            [38.28, 39.72, 44.13, 47.54, 67.37, 74.10, 74.71, 83.69, 93.74, 103.12, 105.56, 111.13, 185.22, 244.27, 38.98, 55.53],
            [40.38, 41.87, 46.54, 50.17, 70.17, 77.19, 77.84, 87.18, 97.62, 107.40, 111.19, 117.04, 195.09, 253.57, 40.62, 58.50],
            [42.46, 44.05, 48.96, 52.82, 73.23, 80.56, 81.22, 90.98, 101.91, 112.09, 116.83, 122.99, 205.01, 262.84, 42.39, 61.48],
            [44.56, 46.22, 51.35, 55.46, 76.16, 83.75, 84.47, 94.61, 105.95, 116.56, 122.48, 128.91, 214.90, 272.12, 44.07, 64.45],
            [46.64, 48.40, 53.78, 58.10, 79.06, 86.97, 87.68, 98.23, 110.00, 121.01, 128.14, 134.86, 224.80, 281.40, 45.75, 67.42],
            [48.75, 50.57, 56.18, 60.73, 81.73, 89.89, 90.64, 101.52, 113.70, 125.08, 133.75, 140.80, 234.68, 290.67, 47.30, 70.39],
            [50.84, 52.74, 58.60, 63.36, 84.64, 93.12, 93.89, 105.15, 117.77, 129.55, 139.40, 146.72, 244.58, 299.95, 48.99, 73.34],
            [52.93, 54.91, 61.01, 66.01, 87.57, 96.31, 97.11, 108.76, 121.83, 134.01, 145.03, 152.69, 254.48, 309.23, 50.67, 76.33],
            [55.02, 57.06, 63.40, 68.65, 90.46, 99.51, 100.34, 112.39, 125.87, 138.48, 150.67, 158.62, 264.35, 318.50, 52.37, 79.29],
            [56.32, 58.77, 65.29, 70.70, 92.05, 101.20, 101.99, 114.36, 127.98, 140.63, 153.28, 163.27, 270.11, 325.77, 53.25, 80.65],
            [57.62, 60.52, 67.15, 72.77, 93.62, 102.88, 103.66, 116.32, 130.09, 142.82, 155.87, 167.92, 275.82, 333.03, 54.12, 82.03],
            [58.92, 62.24, 69.03, 74.83, 95.20, 104.56, 105.31, 118.31, 132.21, 144.99, 158.45, 172.58, 281.55, 340.28, 55.02, 83.40],
            [60.23, 63.97, 70.88, 76.89, 96.77, 106.23, 106.99, 120.28, 134.32, 147.17, 161.05, 177.25, 287.28, 347.55, 55.91, 84.75],
            [61.54, 65.67, 72.74, 78.94, 98.36, 107.92, 108.65, 122.27, 136.43, 149.36, 163.65, 181.91, 293.01, 354.81, 56.79, 86.13],
            [62.84, 67.42, 74.60, 81.00, 99.93, 109.60, 110.30, 124.24, 138.53, 151.52, 166.25, 186.56, 298.75, 362.07, 57.67, 87.47],
            [64.13, 69.13, 76.46, 83.05, 101.51, 111.27, 111.96, 126.22, 140.64, 153.70, 168.85, 191.23, 304.47, 369.33, 58.54, 88.86],
            [65.44, 70.85, 78.34, 85.13, 103.09, 112.95, 113.63, 128.18, 142.75, 155.89, 171.44, 195.88, 310.20, 376.59, 59.44, 90.22],
            [66.74, 72.57, 80.18, 87.18, 104.67, 114.66, 115.29, 130.16, 144.87, 158.05, 174.02, 200.56, 315.93, 383.85, 60.33, 91.58],
            [68.06, 74.28, 82.06, 89.23, 106.23, 116.32, 116.95, 132.14, 146.96, 160.24, 176.63, 205.21, 321.66, 391.10, 61.21, 92.95],
            [69.35, 76.02, 83.92, 91.31, 107.82, 118.02, 118.59, 134.11, 149.10, 162.41, 179.22, 209.86, 327.40, 398.37, 62.10, 94.32],
            [70.66, 77.73, 85.80, 93.37, 109.41, 119.71, 120.26, 136.09, 151.20, 164.60, 181.80, 214.52, 333.13, 405.63, 63.00, 95.67],
            [71.96, 79.46, 87.65, 95.42, 110.98, 121.39, 121.93, 138.07, 153.31, 166.77, 184.41, 219.18, 338.86, 412.89, 63.87, 97.05],
            [73.26, 81.19, 89.53, 97.50, 112.56, 123.07, 123.58, 140.03, 155.41, 168.94, 187.00, 223.83, 344.58, 420.15, 64.75, 98.41],
            [74.57, 82.91, 91.39, 99.55, 114.14, 124.75, 125.26, 142.02, 157.54, 171.13, 189.57, 228.52, 350.32, 427.42, 65.64, 99.78],
            [75.88, 84.63, 93.24, 101.59, 115.71, 126.44, 126.91, 144.00, 159.64, 173.28, 192.20, 233.17, 356.04, 434.67, 66.52, 101.14],
            [77.18, 86.36, 95.10, 103.66, 117.28, 128.12, 128.57, 145.97, 161.75, 175.45, 194.79, 237.82, 361.78, 441.94, 67.42, 102.50],
            [78.47, 88.08, 96.97, 105.71, 118.87, 129.78, 130.23, 147.95, 163.86, 177.64, 197.38, 242.48, 367.51, 449.20, 68.31, 103.87],
            [79.77, 89.79, 98.83, 107.78, 120.45, 131.47, 131.89, 149.90, 165.96, 179.82, 199.97, 247.13, 373.24, 456.45, 69.17, 105.25],
            [81.08, 91.52, 100.71, 109.84, 122.03, 133.15, 133.54, 151.88, 168.08, 182.00, 202.57, 251.79, 378.97, 463.72, 70.06, 106.60],
            [82.39, 93.24, 102.58, 111.89, 123.59, 134.83, 135.22, 153.86, 170.19, 184.18, 205.17, 256.47, 384.69, 470.98, 70.94, 107.97]
        ]
        
        for weight_idx, weight in enumerate(ip_weights):
            for zone_idx, zone in enumerate(zones):
                cursor.execute("""
                    INSERT INTO fedex_rate_cards 
                    (rate_card_name, service_type, origin_region, destination_region, zone_code, 
                     weight_from, weight_to, rate_usd, rate_type, effective_date) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (rate_card_name, service_type, "US", "INTL", zone, weight, weight, ie_rates[weight_idx][zone_idx], "IE", "2025-08-14"))
        
        # Economy Express Heavyweight rates
        economy_heavyweight_rates = [
            [3.94, 4.52, 4.97, 5.43, 6.01, 6.56, 6.57, 7.47, 8.28, 8.95, 9.99, 12.49, 18.75, 22.96, 3.43, 5.23],
            [3.63, 4.29, 4.75, 4.97, 5.46, 6.01, 5.99, 6.80, 7.59, 8.22, 9.08, 11.35, 17.04, 20.90, 3.16, 4.76],
            [3.27, 3.84, 4.29, 4.52, 4.97, 5.46, 5.43, 6.12, 6.80, 7.47, 8.16, 10.22, 15.34, 18.85, 2.86, 4.28],
            [3.27, 3.84, 4.29, 4.52, 4.97, 5.46, 5.43, 6.12, 6.80, 7.47, 8.16, 10.22, 15.34, 18.85, 2.86, 4.28],
            [3.03, 3.72, 4.20, 4.42, 4.49, 4.86, 4.88, 5.55, 6.12, 6.68, 7.37, 9.17, 13.78, 16.92, 2.55, 3.87],
            [3.03, 3.72, 4.20, 4.42, 4.49, 4.86, 4.88, 5.55, 6.12, 6.68, 7.37, 9.17, 13.78, 16.92, 2.55, 3.87],
            [2.79, 3.04, 3.39, 3.61, 4.01, 4.44, 4.42, 4.97, 5.55, 5.99, 6.57, 8.28, 12.36, 15.21, 2.32, 3.44]
        ]
        
        for range_idx, (range_name, weight_from, weight_to) in enumerate(heavyweight_ranges):
            for zone_idx, zone in enumerate(zones):
                cursor.execute("""
                    INSERT INTO fedex_rate_cards 
                    (rate_card_name, service_type, origin_region, destination_region, zone_code, 
                     weight_from, weight_to, rate_usd, rate_type, effective_date) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (rate_card_name, service_type, "US", "INTL", zone, weight_from, weight_to, economy_heavyweight_rates[range_idx][zone_idx], "IEKG", "2025-08-14"))
        
        print(f"✅ Created {service_type} rates")
        
        # Commit changes
        conn.commit()
        
        # Get final count
        cursor.execute("SELECT COUNT(*) FROM fedex_rate_cards")
        total_count = cursor.fetchone()[0]
        
        print(f"\n🎉 Successfully created complete FedEx rate cards!")
        print(f"📊 Total rate entries: {total_count}")
        
        # Show summary by service type
        cursor.execute("""
            SELECT service_type, rate_type, COUNT(*) as count 
            FROM fedex_rate_cards 
            GROUP BY service_type, rate_type 
            ORDER BY service_type, rate_type
        """)
        
        print("\n📋 Rate card summary:")
        for row in cursor.fetchall():
            print(f"  {row[0]} - {row[1]}: {row[2]} entries")
        
        conn.close()
        
    except Exception as e:
        print(f"❌ Error creating FedEx rate cards: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("🚀 Creating complete FedEx rate cards for all service types...")
    success = create_complete_fedex_rate_cards()
    
    if success:
        print("\n✅ FedEx rate cards created successfully!")
    else:
        print("\n❌ Failed to create FedEx rate cards!")
        sys.exit(1)
